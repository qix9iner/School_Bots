import logging
import asyncio
import schedule
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.storage.memory import MemoryStorage

API_TOKEN = '7429555557:AAGuBHAsoD9e9ERtzWJ3P_x0rQjG_iyafJw'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
GROUP_CHAT_URL = 'https://t.me/+tbKDG-SaU5w2NWZi'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
USER_DATA = {}

async def send_lecture(user_id, lecture_num):
    lectures = {
        1: "https://drive.google.com/file/d/1wo6mx86foP-e5bxrl2llmn0HWvURZPGy/view?usp=sharing",
        2: "–í–ê–®–ê_–°–°–´–õ–ö–ê_–ù–ê_–í–¢–û–†–û–ô_–í–ï–ë–ò–ù–ê–†",
        3: "–í–ê–®–ê_–°–°–´–õ–ö–ê_–ù–ê_–¢–†–ï–¢–ò–ô_–í–ï–ë–ò–ù–ê–†",
        4: "–í–ê–®–ê_–°–°–´–õ–ö–ê_–ù–ê_–ß–ï–¢–í–ï–†–¢–´–ô_–í–ï–ë–ò–ù–ê–†",
    }
    
    if lecture_num in lectures:
        video_link = lectures[lecture_num]
        text = f"–õ–µ–∫—Ü—ñ—è {lecture_num}: –í–∞—à –≤–µ–±—ñ–Ω–∞—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π [–∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º]({video_link})."
        await bot.send_message(user_id, text, parse_mode="Markdown")
    else:
        await bot.send_message(user_id, '–í—Å—ñ –ª–µ–∫—Ü—ñ—ó –ø—Ä–æ–π–¥–µ–Ω–æ!')

async def schedule_next_lecture(user_id, lecture_num):
    next_lecture_time = datetime.now() + timedelta(days=1)
    next_lecture_time = next_lecture_time.replace(hour=10, minute=0, second=0, microsecond=0)
    
    if lecture_num < 4:
        schedule.every().day.at(next_lecture_time.strftime("%H:%M")).do(lambda: asyncio.run(send_scheduled_lecture(user_id, lecture_num + 1)))
        await bot.send_message(user_id, f"–ó–∞–≤—Ç—Ä–∞ –í–∞–º –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–µ–∫—Ü—ñ—è ‚Ññ{lecture_num + 1} –æ 10 –≥–æ–¥–∏–Ω—ñ.")

async def send_scheduled_lecture(user_id, lecture_num):
    await send_lecture(user_id, lecture_num)
    USER_DATA[user_id] = lecture_num

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    USER_DATA[user_id] = 1
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ç–∞ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", url=GROUP_CHAT_URL)],
        [InlineKeyboardButton(text="–î–æ–ø–æ–º–æ–≥–∞", callback_data="help")]
    ])
    
    welcome_text = """
    –í—ñ—Ç–∞—é –í–∞—Å, –∫–æ–ª–µ–≥–∏!

    –î—è–∫—É—é, —â–æ –≤–∏—Ä—ñ—à–∏–ª–∏ –¥–æ—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ —Ü—å–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è.

    –ë—É–¥–µ–º–æ –±–∞–≥–∞—Ç–æ —Ä–æ–∑–±–∏—Ä–∞—Ç–∏—Å—å, —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å —ñ —Ä–æ–∑–∫–ª–∞–¥–∞—Ç–∏ —Å–∫–µ–ª–µ—Ç–∏ –ø–æ —à–∞—Ñ–∞–º.

    üü¢–ù–∞ –∫—É—Ä—Å—ñ –≤–∏ –¥—ñ–∑–Ω–∞—î—Ç–µ—Å—è –ø—Ä–æ —Ç–∏–ø–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤:
    üìå –∑–∞ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—è–º–∏ —Å–ø—Ä–∏–π–Ω—è—Ç—Ç—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.
    üìå –∑–∞ —Å—Ç–∏–ª–µ–º –∂–∏—Ç—Ç—è.

    üü¢–ù–∞–≤—á–∏—Ç–µ—Å—å —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥—ñ—á–Ω–∏—Ö –∫–ª—ñ–Ω—ñ–∫ –∑–∞ –º–æ—Ç–∏–≤–∞–º–∏ –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ —Ç–∞ —ó—Ö –Ω–∞–π—á–∞—Å—Ç—ñ—à—ñ –ø—Å–∏—Ö–æ–µ–º–æ—Ü—ñ–π–Ω—ñ —Å—Ç–∞–Ω–∏ —Ç–∞ –ø—Ä–æ–±–ª–µ–º–∏.
    üü¢–ó—Ä–æ–∑—É–º—ñ—î—Ç–µ, —â–æ —Ç–∞–∫–µ —Ç–∏–ø –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ —Å—Ç—É–ø–µ–Ω–µ–º –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è –ø–æ—Ç—Ä–µ–±.
    üü¢–ù–∞–≤—á–∏—Ç–µ—Å—å –Ω–µ —Ç—ñ–ª—å–∫–∏ –≤–∏—Ö–æ–¥–∏—Ç–∏ –∑—ñ —Å–∫–ª–∞–¥–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ–π, –∞ –π –≤–∑–∞–≥–∞–ª—ñ —É–Ω–∏–∫–∞—Ç–∏ —ó—Ö.

    ‚ùóÔ∏è–û—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤–∞—à–æ–≥–æ –ø–µ—Ä–≤–∏–Ω–Ω–æ–≥–æ –ø—Ä–∏–π–æ–º—É —ñ –±—É–¥–µ—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏ –π–æ–≥–æ —Ç–∞–∫, —â–æ –ø–∞—Ü—ñ—î–Ω—Ç–∏ –∑–∞–≤–∂–¥–∏ –±—É–¥—É—Ç—å –¥–æ –≤–∞—Å –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—è.
    üìç–í–∞—Å —á–µ–∫–∞—î 4 –¥–Ω—ñ, –∫–æ–∂–Ω–∞ –ª–µ–∫—Ü—ñ—è –¥–æ 30 —Ö–≤–∏–ª–∏–Ω.

    –Ü –∑–∞–ø—Ä–æ—à—É—é —Ç–µ–±–µ –¥–æ—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ —á–∞—Ç—É –∫–æ–ª–µ–≥ —ñ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Å–≤–æ—é –≥—Ä—É.
    """
    
    await message.reply(welcome_text, reply_markup=keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–π –ª–µ–∫—Ü–∏–∏ —Å—Ä–∞–∑—É
    await send_lecture(user_id, 1)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π –ª–µ–∫—Ü–∏–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00
    await schedule_next_lecture(user_id, 1)

@dp.callback_query()
async def handle_callback(callback_query: CallbackQuery):
    data = callback_query.data
    user_id = callback_query.from_user.id

    if data == "help":
        help_text = """
        –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
        

        /start - –ü–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—à—É –ª–µ–∫—Ü—ñ—é.
        /help - –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–º–∞–Ω–¥–∏.
        """
        await callback_query.message.reply(help_text)
        await callback_query.answer()

@dp.message(Command("help"))
async def send_help(message: types.Message):
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
    
    /start - –ü–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—à—É –ª–µ–∫—Ü—ñ—é.
    /help - –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–º–∞–Ω–¥–∏.
    """
    await message.reply(help_text)

async def scheduler():
    while True:
        schedule.run_pending()
        await asyncio.sleep(1)

async def main():
    loop = asyncio.get_event_loop()
    loop.create_task(scheduler())
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
